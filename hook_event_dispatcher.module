<?php

/**
 * @file
 * Hook event dispatcher module.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\hook_event_dispatcher\Event\Entity\EntityAccessEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityCreateEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityDeleteEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityInsertEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityLoadEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityPredeleteEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityPresaveEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityUpdateEvent;
use Drupal\hook_event_dispatcher\Event\Entity\EntityViewEvent;
use Drupal\hook_event_dispatcher\Event\Form\FormAlterEvent;
use Drupal\hook_event_dispatcher\Event\Form\FormBaseAlterEvent;
use Drupal\hook_event_dispatcher\Event\Form\FormIdAlterEvent;
use Drupal\hook_event_dispatcher\Event\Form\WidgetFormAlterEvent;
use Drupal\hook_event_dispatcher\Event\Form\WidgetTypeFormAlterEvent;

/**
 * Implements hook_help().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_help($routeName) {
  if ($routeName === 'help.page.hook_event_dispatcher') {
    $path = drupal_get_path('module', 'hook_event_dispatcher');
    $output = file_get_contents($path . '/README.txt');
    return '<pre>' . $output . '</pre>';
  }
  return '';
}

/**
 * Implements hook_entity_insert().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_entity_insert(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new EntityInsertEvent($entity));
}

/**
 * Implements hook_entity_update().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_entity_update(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new EntityUpdateEvent($entity));
}

/**
 * Implements hook_entity_predelete().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_entity_predelete(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new EntityPredeleteEvent($entity));
}

/**
 * Implements hook_entity_delete().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_entity_delete(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new EntityDeleteEvent($entity));
}

/**
 * Implements hook_entity_presave().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_entity_presave(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new EntityPresaveEvent($entity));
}

/**
 * Implements hook_entity_access().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $event = new EntityAccessEvent($entity, $operation, $account);
  $manager->register($event);

  return $event->getAccessResult();
}

/**
 * Implements hook_entity_create().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_entity_create(EntityInterface $entity) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new EntityCreateEvent($entity));
}

/**
 * Implements hook_entity_load().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_entity_load(array $entities, $entityTypeId) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new EntityLoadEvent($entities, $entityTypeId));
}

/**
 * Implements hook_entity_view().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $viewMode) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new EntityViewEvent($build, $entity, $display, $viewMode));
}

/**
 * Implements hook_form_alter().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_form_alter(&$form, FormStateInterface $formState, $formId) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new FormIdAlterEvent($form, $formState, $formId));
  $manager->register(new FormAlterEvent($form, $formState, $formId));

  $buildInfo = $formState->getBuildInfo();
  if (!empty($buildInfo['base_form_id'])) {
    /** @var \Drupal\hook_event_dispatcher\Event\Form\FormBaseAlterEvent $event */
    $manager->register(new FormBaseAlterEvent($form, $formState, $formId, $buildInfo['base_form_id']));
  }
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_field_widget_form_alter(&$element, FormStateInterface $formState, $context) {
  /** @var \Drupal\hook_event_dispatcher\Manager\HookEventDispatcherManager $manager */
  $manager = Drupal::service('hook_event_dispatcher.manager');
  $manager->register(new WidgetTypeFormAlterEvent($element, $formState, $context));
  $manager->register(new WidgetFormAlterEvent($element, $formState, $context));
}

/**
 * Implements hook_preprocess().
 *
 * {@inheritdoc}
 */
function hook_event_dispatcher_preprocess(&$variables, $hook) {
  /* @var \Drupal\hook_event_dispatcher\Service\PreprocessEventService $service */
  $service = Drupal::service('preprocess_event.service');
  $service->createAndDispatchKnownEvent($hook, $variables);
}
